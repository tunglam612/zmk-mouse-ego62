/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE     &kp N1        &kp N2         &kp N3     &kp N4  &kp N5                               &kp N6           &kp N7  &kp N8     &kp N9     &kp N0         &kp MINUS
&kp TAB        &kp Q         &kp W          &kp E      &kp R   &kp T                                &kp Y            &kp U   &kp I      &kp O      &kp P          &kp EQUAL
&kp CAPSLOCK   &kp A         &kp S          &kp D      &kp F   &kp G                                &kp H            &kp J   &kp K      &kp L      &kp SEMICOLON  &kp SQT
&kp LSHFT      &kp Z         &kp X          &kp C      &kp V   &kp B                                &kp N            &kp M   &kp COMMA  &kp DOT    &kp FSLH       &kp ENTER
&kp BACKSLASH  &kp LEFT_GUI  &kp BACKSPACE  &kp LCTRL  &mo 2   &kp LEFT_ALT  &kp SPACE  &kp DELETE  &kp PRINTSCREEN  &mo 3   &kp SPACE  &kp RSHFT  &kp LBKT       &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        gaming {
            bindings = <
&kp ESCAPE     &kp N1        &kp N2         &kp N3     &kp N4  &kp N5                               &kp N6           &kp N7  &kp N8     &kp N9     &kp N0         &kp MINUS
&kp TAB        &kp Q         &kp W          &kp E      &kp R   &kp T                                &kp Y            &kp U   &kp I      &kp O      &kp P          &kp EQUAL
&kp CAPSLOCK   &kp A         &kp S          &kp D      &kp F   &kp G                                &kp H            &kp J   &kp K      &kp L      &kp SEMICOLON  &kp SQT
&kp LSHFT      &kp Z         &kp X          &kp C      &kp V   &kp B                                &kp N            &kp M   &kp COMMA  &kp DOT    &kp FSLH       &kp ENTER
&kp BACKSLASH  &kp LEFT_GUI  &kp BACKSPACE  &kp LCTRL  &mo 2   &kp LEFT_ALT  &kp SPACE  &kp DELETE  &kp PRINTSCREEN  &mo 3   &kp SPACE  &kp RSHFT  &kp LBKT       &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower {
            bindings = <
&kp LC(GRAVE)  &kp F1    &kp F2    &kp F3    &kp F4    &none                                     &trans        &kp N7  &kp N8     &kp N9           &kp BSPC    &kp ESC
&kp TAB        &kp F5    &kp F6    &kp F7    &kp F8    &none                                     &kp C_VOL_UP  &kp N4  &kp N5     &kp N6           &kp ENTER   &kp F13
&kp LSHFT      &kp F9    &kp F10   &kp F11   &kp F12   &kp ENTER                                 &kp C_VOL_DN  &kp N1  &kp N2     &kp N3           &none       &kp F14
&kp LCTRL      &kp LALT  &kp LGUI  &mkp MB2  &mkp MB1  &mkp MB3                                  &kp C_MUTE    &kp N0  &kp COMMA  &kp DOT          &kp C_PP    &kp F15
&mkp MB4       &mkp MB5  &none     &none     &mo 2     &none      &kp LC(BACKSPACE)  &kp INSERT  &none         &mo 3   &kp SPACE  &kp RIGHT_SHIFT  &kp C_PREV  &kp C_NEXT
            >;
        };

        raise {
            bindings = <
&kp GRAVE  &trans  &trans  &trans  &trans  &trans                            &kp F6         &kp F7             &kp F8          &kp F9           &kp F10        &kp F11
&trans     &trans  &trans  &trans  &trans  &trans                            &kp PAGE_UP    &kp HOME           &kp UP_ARROW    &kp END          &trans         &kp F12
&trans     &trans  &trans  &trans  &trans  &trans                            &kp PAGE_DOWN  &kp LEFT_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW  &mo 2          &kp ENTER
&trans     &trans  &trans  &trans  &trans  &trans                            &kp LC(LS(N))  &kp K_APPLICATION  &kp LC(LEFT)    &kp LC(RIGHT)    &kp BACKSLASH  &kp RSHFT
&trans     &trans  &trans  &trans  &mo 2   &trans  &none  &kp LC(BACKSPACE)  &mkp MB2       &mo 3              &mkp MB1        &trans           &kp RGUI       &kp ESC
            >;
        };

        adjust {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1            &bt BT_SEL 2        &bt BT_SEL 3         &bt BT_SEL 4                &none  &none         &none       &none         &none  &none
&out OUT_TOG  &none         &none                   &none               &none                &none                       &none  &none         &none       &none         &none  &none
&none         &none         &kp LG(LS(LEFT_ARROW))  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &none                       &none  &kp C_PREV    &kp C_PP    &kp C_NEXT    &none  &none
&none         &none         &none                   &none               &none                &none                       &none  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &none  &none
&none         &none         &none                   &none               &none                &none         &none  &none  &none  &none         &none       &none         &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3activate {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
